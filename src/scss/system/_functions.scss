///
/// @group System
///

@import '../variables';



/// @name   _replace [@function]
/// @author Sebastian Inman
/// @since  January 27, 2020
/// @param  {String} $string
/// @param  {String} $search
/// @param  {String} $replace

@function _replace($string, $search, $replace: '') {

    $index: str-index($string, $search);

    @if $index {

        @return str-slice($string, 1, $index - 1) + $replace + _replace(str-slice($string, $index + str-length($search)), $search, $replace);

    }

    @return $string;

}



/// @name   _explode [@function]
/// @author Sebastian Inman
/// @since  January 27, 2020
/// @param  {String} $string
/// @param  {String} $delimiter

@function _explode($string, $delimiter: '') {

    @if type-of($string) != 'string' {

        @error 'The argument $string: `#{$string}` is of incorrect type: `#{type-of($string)}`. Type of `String` is required.';

    }

    @if type-of($delimiter) != 'string' {

        @error 'The argument $delimiter: `#{$delimiter}` is of incorrect type: `#{type-of($delimiter)}`. Type of `String` is required.';

    }

    $result: ();
    $running: true;

    @if str-length($delimiter) == 0 {

        @for $i from 1 through str-length($string) {

            $result: append($result, str-slice($string, $i, $i));

        }

        @return $result;
    }

    @while $running {

        $index: str-index($string, $delimiter);

        @if $index != null {

            $item: str-slice($string, 1, ($index - 1));
            $result: append($result, $item);
            $string: str-slice($string, ($index + str-length($delimiter)));

        } @else {

            $running: false;

        }

    }

    @return append($result, $string);

}



/// @name   _map-check [@function]
/// @author Sebastian Inman
/// @since  January 27, 2020
/// @param  {Map} $map
/// @param  {Map} $keys

@function _map-check($map, $keys...) {

    @if type-of($map) != 'map' {

        @error 'The argument $map: `#{$map}` is of incorrect type: `#{type-of($map)}`. Type of `Map` is required.';

    }

    @each $key in $keys {

        @if not map-has-key($map, $key) {

            @return false;

        }

        $map: map-get($map, $key);

    }

    @return true;

}



/// @name   _map-get [@function]
/// @author Sebastian Inman
/// @since  January 27, 2020
/// @param  {Map} $map
/// @param  {Map} $keys

@function _map-get($map, $keys...) {

    @if type-of($map) != 'map' {

        @error 'The argument $map: `#{$map}` is of incorrect type: `#{type-of($map)}`. Type of `Map` is required.';

    }

    @each $key in $keys {

        $map: map-get($map, $key);

    }

    @return $map;

}



/// @name   _get [@function]
/// @author Sebastian Inman
/// @since  January 27, 2020
/// @param  {String} $key
/// @param  {Map} $map

@function _get($key: '', $map: $variables) {

    @if str-length($key) > 0 {

        $keys: _explode('#{$key}', '.');

        @if not _map-check($map, $keys...) {

            @error 'The argument $map: `#{$map}` does not have some of the $keys: `#{$keys}`.';

        }

        @return _map-get($map, $keys...);

    } @else {

        @return $map;

    }

}



/// @name   _var [@function]
/// @author Sebastian Inman
/// @since  January 27, 2020
/// @param  {String} $key
/// @param  {Boolean} $css
/// @param  {Map} $map

@function _var($key: '', $css: true, $map: $variables) {

    $keys: _explode('#{$key}', '.');

    @if not _map-check($map, $keys...) {

        @error 'The argument $map: `#{$map}` does not have some of the $keys: `#{$keys}`.';

    }

    @if $css {

        @return var(--#{_replace($key, '.', '-')});

    } @else {

        @return _map-get($map, $keys...);

    }

}

